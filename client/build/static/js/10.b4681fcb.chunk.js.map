{"version":3,"sources":["components/CateBlog.js","apicalls/index.js","components/Layout.js"],"names":["Header1","styled","h1","CateBlog","match","useState","posts","setPosts","category","setCategory","useEffect","mounted","getCatePosts","params","id","then","blogs","error","console","log","data","name","className","map","post","index","key","createPost","a","fields","fetch","method","headers","body","JSON","stringify","response","json","createCategory","getAllPosts","getCategories","abortController","AbortController","signal","getPostById","updatePost","deletePost","getCategoryById","Layout","postTitle","title","postId","_id","postDescription","description","to"],"mappings":"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","file":"static/js/10.b4681fcb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getCatePosts } from \"../apicalls\";\r\nimport styled from \"styled-components\";\r\nimport UserNav from \"../Core/UserNav\";\r\nimport Layout from \"./Layout\";\r\nimport { PostStyle } from \"../utils\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Header1 = styled.h1`\r\n  margin-top: 0.5em;\r\n  margin-bottom: 1em;\r\n  text-align: center;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    margin-top: -0.5em;\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst CateBlog = ({ match }) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    getCatePosts(match.params.id).then((blogs) => {\r\n      if (mounted) {\r\n        if (blogs.error) {\r\n          console.log(\"ERROR\");\r\n        }\r\n        setPosts(blogs.data);\r\n        setCategory(blogs.category.name);\r\n      }\r\n    });\r\n    return function cleanup() {\r\n      mounted = false;\r\n    };\r\n  }, [match.params.id]);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>{`Posts on ${category}`}</title>\r\n      </Helmet>\r\n      <UserNav />\r\n      <main>\r\n        <Header1>{category}</Header1>\r\n        <hr />\r\n        <PostStyle>\r\n          <div className=\"grid-container\">\r\n            {posts.map((post, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <Layout post={post} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </PostStyle>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CateBlog;\r\n","export const createPost = async ({ fields }, id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/${id}/create`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.log(error);\r\n  }\r\n};\r\n\r\nexport const createCategory = async (category) => {\r\n  try {\r\n    const response = await fetch(\"/api/category/create\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(category),\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.log(error);\r\n  }\r\n};\r\n\r\nexport const getAllPosts = async () => {\r\n  try {\r\n    const response = await fetch(\"/api/blog\", {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(\"error :\", err);\r\n  }\r\n};\r\n\r\nexport const getCategories = async () => {\r\n  const abortController = new AbortController();\r\n  try {\r\n    const response = await fetch(\r\n      \"/api/allCategories\",\r\n      {\r\n        method: \"GET\",\r\n      },\r\n      { signal: abortController.signal }\r\n    );\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getPostById = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/${id}`, {\r\n      method: \"GET\",\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const updatePost = async ({ fields }, id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/update/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const deletePost = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/category/${id}`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const getCatePosts = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/category/${id}/posts`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PostStyle } from \"../utils\";\r\n\r\nconst Layout = ({ post }) => {\r\n  var postTitle = post ? post.title : \"Post title\";\r\n  var postId = post ? post._id : \"Post Id\";\r\n  var postDescription = post ? post.description : \"Post Description\";\r\n\r\n  return (\r\n    <Fragment>\r\n      <Link to={`/blog/${postId}`} className=\"card-link\">\r\n        <PostStyle>\r\n          <div className=\"grid-card\">\r\n            <h3 className=\"card-title\">{postTitle}</h3>\r\n            <h4 className=\"card-description \">{postDescription}</h4>\r\n          </div>\r\n        </PostStyle>\r\n      </Link>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}