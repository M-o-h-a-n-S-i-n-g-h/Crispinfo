{"version":3,"sources":["components/Posts.js","apicalls/index.js","components/Layout.js"],"names":["Posts","useState","posts","setPosts","loading","setLoading","useEffect","getAllPosts","then","data","error","console","log","className","map","post","index","key","createPost","id","a","fields","fetch","method","headers","body","JSON","stringify","response","json","createCategory","category","getCategories","abortController","AbortController","signal","getPostById","updatePost","deletePost","getCategoryById","getCatePosts","Layout","postTitle","title","postId","_id","postDescription","description","to"],"mappings":"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","file":"static/js/11.326be1fc.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport UserNav from \"../Core/UserNav\";\r\nimport { getAllPosts } from \"../apicalls/index\";\r\nimport Layout from \"./Layout\";\r\nimport { PostStyle } from \"../utils\";\r\nimport Loading from \"../components/customComponents/LoadingComponent\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Posts = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const preLoad = () => {\r\n    getAllPosts().then((data) => {\r\n      if (data.error) {\r\n        console.log(data.error);\r\n      } else {\r\n        setPosts(data);\r\n        setLoading(false);\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    preLoad();\r\n  }, []);\r\n\r\n  const postLoadingMessage = () => {\r\n    return loading && <Loading />;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Helmet>\r\n        <title>CrispInfo | Posts</title>\r\n      </Helmet>\r\n      <UserNav />\r\n      <main>\r\n        <div className=\"content\">\r\n          <h1>Posts Page</h1>\r\n          <hr />\r\n          <PostStyle>\r\n            {postLoadingMessage()}\r\n            <div className=\"mobile-grid\">\r\n              <div className=\"grid-container\">\r\n                {posts.map((post, index) => {\r\n                  return (\r\n                    <div key={index}>\r\n                      <Layout post={post} />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </PostStyle>\r\n        </div>\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","export const createPost = async ({ fields }, id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/${id}/create`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.log(error);\r\n  }\r\n};\r\n\r\nexport const createCategory = async (category) => {\r\n  try {\r\n    const response = await fetch(\"/api/category/create\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(category),\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.log(error);\r\n  }\r\n};\r\n\r\nexport const getAllPosts = async () => {\r\n  try {\r\n    const response = await fetch(\"/api/blog\", {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(\"error :\", err);\r\n  }\r\n};\r\n\r\nexport const getCategories = async () => {\r\n  const abortController = new AbortController();\r\n  try {\r\n    const response = await fetch(\r\n      \"/api/allCategories\",\r\n      {\r\n        method: \"GET\",\r\n      },\r\n      { signal: abortController.signal }\r\n    );\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getPostById = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/${id}`, {\r\n      method: \"GET\",\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const updatePost = async ({ fields }, id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/update/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const deletePost = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/category/${id}`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const getCatePosts = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/category/${id}/posts`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PostStyle } from \"../utils\";\r\n\r\nconst Layout = ({ post }) => {\r\n  var postTitle = post ? post.title : \"Post title\";\r\n  var postId = post ? post._id : \"Post Id\";\r\n  var postDescription = post ? post.description : \"Post Description\";\r\n\r\n  return (\r\n    <Fragment>\r\n      <Link to={`/blog/${postId}`} className=\"card-link\">\r\n        <PostStyle>\r\n          <div className=\"grid-card\">\r\n            <h3 className=\"card-title\">{postTitle}</h3>\r\n            <h4 className=\"card-description \">{postDescription}</h4>\r\n          </div>\r\n        </PostStyle>\r\n      </Link>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}