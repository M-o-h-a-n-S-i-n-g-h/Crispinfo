{"version":3,"sources":["components/viewLayout.js","apicalls/index.js"],"names":["getPostById","require","AnimationFloat","styled","div","ViewLayout","props","useEffect","loadPost","match","params","id","useState","title","author","description","markdown","blog","setBlog","a","then","data","console","log","blogTitle","blogContent","blogDescription","name","content","className","source","escapeHtml","createPost","fields","fetch","method","headers","body","JSON","stringify","response","json","createCategory","category","getAllPosts","getCategories","abortController","AbortController","signal","updatePost","deletePost","getCategoryById","getCatePosts"],"mappings":"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","file":"static/js/14.3afa51ca.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport UserNav from \"../Core/UserNav\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { ViewDiv } from \"../utils\";\r\nimport { Helmet } from \"react-helmet\";\r\nconst { getPostById } = require(\"../apicalls/index\");\r\n\r\nconst AnimationFloat = styled.div`\r\n  // !ANIMATIONS\r\n  @keyframes fadeIn {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    60% {\r\n      opacity: 1;\r\n      transform: translateX(-5px);\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n      transition: all ease 0.3s 0s;\r\n      transform: translateX(1);\r\n    }\r\n  }\r\n\r\n  @keyframes fade {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n      transition: all 0.3s ease 0s;\r\n    }\r\n  }\r\n\r\n  @keyframes slideUp {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    60% {\r\n      opacity: 1;\r\n      transform: translateY(-5px);\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n      transform: translateY(1);\r\n      transition: all 0.3s ease 0s;\r\n    }\r\n  }\r\n\r\n  span {\r\n    animation: fadeIn 0.3s;\r\n    animation-duration: 0.8s;\r\n    animation-timing-function: ease;\r\n  }\r\n\r\n  .content-grid {\r\n    animation: fade 0.3s;\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease;\r\n  }\r\n\r\n  .content-grid > h2,\r\n  blockquote {\r\n    animation: slideUp 0.3s;\r\n    animation-duration: 0.8s;\r\n  }\r\n\r\n  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\r\n    @keyframes fadeIn {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n      60% {\r\n        opacity: 1;\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n        transition: all ease 0.3s 0s;\r\n        transform: translateX(1);\r\n      }\r\n    }\r\n\r\n    @keyframes fade {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n        transition: all 0.3s ease 0s;\r\n      }\r\n    }\r\n\r\n    @keyframes slideUp {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n      60% {\r\n        opacity: 1;\r\n        transform: translateY(-5px);\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n        transform: translateY(1);\r\n        transition: all 0.3s ease 0s;\r\n      }\r\n    }\r\n\r\n    span {\r\n      animation: fadeIn 0.3s;\r\n      animation-duration: 0.8s;\r\n      animation-timing-function: ease;\r\n    }\r\n\r\n    .content-grid {\r\n      animation: fade 0.3s;\r\n      animation-duration: 1s;\r\n      animation-timing-function: ease;\r\n    }\r\n\r\n    .content-grid > h2,\r\n    blockquote {\r\n      animation: slideUp 0.3s;\r\n      animation-duration: 0.8s;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ViewLayout = (props) => {\r\n  useEffect(() => {\r\n    loadPost();\r\n  }, [props.match.params.id]);\r\n\r\n  const [blog, setBlog] = useState({\r\n    title: \"\",\r\n    author: \"\",\r\n    description: \"\",\r\n    markdown: \"\",\r\n  });\r\n\r\n  const loadPost = async () => {\r\n    await getPostById(props.match.params.id).then((data) => {\r\n      if (data) {\r\n        setBlog({\r\n          title: data.title,\r\n          author: data.author,\r\n          description: data.description,\r\n          markdown: data.markdown,\r\n        });\r\n      } else {\r\n        console.log(\"FAILED CHECK FOR ERROR\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const blogTitle = blog ? blog.title : \"BlogTitle\";\r\n  const blogContent = blog ? blog.markdown : \"BlogTitle\";\r\n  const blogDescription = blog ? blog.description : \"Blog Description\";\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>{blogTitle}</title>\r\n        <meta name=\"description\" content={blogDescription} />\r\n      </Helmet>\r\n      <UserNav />\r\n      <Fragment>\r\n        <AnimationFloat>\r\n          <ViewDiv>\r\n            <span>{blogTitle}</span>\r\n            <hr />\r\n            <main>\r\n              <div className=\"content-grid\">\r\n                {\" \"}\r\n                <ReactMarkdown source={blogContent} escapeHtml={false} />\r\n              </div>\r\n            </main>\r\n          </ViewDiv>\r\n        </AnimationFloat>\r\n      </Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewLayout;\r\n","export const createPost = async ({ fields }, id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/${id}/create`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.log(error);\r\n  }\r\n};\r\n\r\nexport const createCategory = async (category) => {\r\n  try {\r\n    const response = await fetch(\"/api/category/create\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(category),\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.log(error);\r\n  }\r\n};\r\n\r\nexport const getAllPosts = async () => {\r\n  try {\r\n    const response = await fetch(\"/api/blog\", {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(\"error :\", err);\r\n  }\r\n};\r\n\r\nexport const getCategories = async () => {\r\n  const abortController = new AbortController();\r\n  try {\r\n    const response = await fetch(\r\n      \"/api/allCategories\",\r\n      {\r\n        method: \"GET\",\r\n      },\r\n      { signal: abortController.signal }\r\n    );\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getPostById = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/${id}`, {\r\n      method: \"GET\",\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const updatePost = async ({ fields }, id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/update/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    console.log(response);\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const deletePost = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/blog/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/category/${id}`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (err) {\r\n    return console.log(err);\r\n  }\r\n};\r\n\r\nexport const getCatePosts = async (id) => {\r\n  try {\r\n    const response = await fetch(`/api/category/${id}/posts`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"],"sourceRoot":""}